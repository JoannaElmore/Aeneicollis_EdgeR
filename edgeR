# to install packages ggplot2 and edgeR:
# install.packages("ggplot2")
# if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.10")
# if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")

BiocManager::install("edgeR")

#load packages
library(ggplot2)
library(edgeR)
library(dplyr)
library(tidyr)

#####
#
# User-defined variables
#
#####

# set working directory; must only contain directories containing kallisto output, no other files or directories 
setwd("/vol_b/kallistoquant/")
# set output directory
out_dir <- "/home/elmore5/DGE_analysis_output/"
# get annotation file
# "trinotate_annotation_report.txt" is a Trinotate output excel file, exported as tab-delimited
transcripts <- read.delim("/vol_b/trinotate_annotation_report.txt",stringsAsFactors=FALSE)

# define groups, load groups file with libraries as columns and library attributes (Rearing_Elevation, Treatment, PGI, and tRNA_L) as rows
groups <- read.delim("/vol_b/EdgeR_groups.txt", colClasses = c("character", rep("factor",96)))
str(groups)

##########
#
# Import Kallisto expression estimates, est counts and TPM values
#
##########

# creates a vector of the sequencing library directory names, "libs"
libs <- list.files()

# loads in the results.kallisto files
# each is in a unique directory in the pwd
for (dirname in libs) {
  cat('reading in', dirname, '\n')
  tempframe <- read.delim(paste('./', dirname, '/abundance.tsv', sep=''))
  assign(dirname, tempframe[order(tempframe$target_id),]) # generate dataframe, organizing rows by target_id
}

# Make a TPM dataframe for heatmap and plots, "all_tpm"
# initialize column of transcript names and the first data column
all_tpm <- data.frame(target_id=get(libs[1])$target_id, tpm=get(libs[1])$tpm)
# change the column name
colnames(all_tpm)[colnames(all_tpm)=="tpm"] <- paste(libs[1],"_tpm",sep="") 
# now iterate over the remaining columns...
for (name in libs[2:length(libs)]) {
  # makes a new column
  all_tpm$tpm <- get(name)$tpm
  # renames that new column
  colnames(all_tpm)[colnames(all_tpm)=="tpm"] <- paste(name,"_tpm",sep="")
}

# Make a counts dataframe for EdgeR analysis, "all_count"
# initialize column of transcript names and the first data column
all_count <- data.frame(target_id=get(libs[1])$target_id, est_counts=get(libs[1])$est_counts)
# change the column name
colnames(all_count)[colnames(all_count)=="est_counts"] <- paste(libs[1],"_count",sep="")
# now iterate over the remaining columns...
for (name in libs[2:length(libs)]) {
  # makes a new column
  all_count$est_counts <- get(name)$est_counts
  # renames that new column
  colnames(all_count)[colnames(all_count)=="est_counts"] <- paste(name,"_count",sep="")
}

# clean up environment
rm(tempframe, name, dirname)
rm(list = libs) 

# create row names from target_id
rownames(all_count) <- all_count$target_id
rownames(all_tpm) <- all_tpm$target_id
# remove target_id column
all_count$target_id <- NULL
all_tpm$target_id <- NULL

# Rename columns
colnames(all_count)
colnames(all_count) <- c("trimmedA10.kallisto_out", "trimmedA101.kallisto_out", "trimmedA102.kallisto_out", "trimmedA11.kallisto_out", "trimmedA112.kallisto_out", "trimmedA114.kallisto_out", "trimmedA116.kallisto_out", "trimmedA12.kallisto_out", "trimmedA121.kallisto_out", "trimmedA124.kallisto_out", "trimmedA126.kallisto_out", "trimmedA13.kallisto_out", "trimmedA132.kallisto_out", "trimmedA133.kallisto_out", "trimmedA145.kallisto_out", "trimmedA148.kallisto_out", "trimmedA154.kallisto_out", "trimmedA156.kallisto_out", "trimmedA158.kallisto_out", "trimmedA160.kallisto_out", "trimmedA164.kallisto_out", "trimmedA165.kallisto_out", "trimmedA168.kallisto_out", "trimmedA169.kallisto_out", "trimmedA171.kallisto_out", "trimmedA174.kallisto_out", "trimmedA175.kallisto_out", "trimmedA177.kallisto_out", "trimmedA18.kallisto_out", "trimmedA184.kallisto_out", "trimmedA186.kallisto_out", "trimmedA191.kallisto_out", "trimmedA192.kallisto_out", "trimmedA193.kallisto_out", "trimmedA196.kallisto_out", "trimmedA197.kallisto_out", "trimmedA199.kallisto_out", "trimmedA200.kallisto_out", "trimmedA207.kallisto_out", "trimmedA210.kallisto_out", "trimmedA212.kallisto_out", "trimmedA213.kallisto_out", "trimmedA214.kallisto_out", "trimmedA217.kallisto_out", "trimmedA22.kallisto_out", "trimmedA220.kallisto_out", "trimmedA221.kallisto_out", "trimmedA223.kallisto_out", "trimmedA229.kallisto_out", "trimmedA23.kallisto_out", "trimmedA232.kallisto_out", "trimmedA233.kallisto_out", "trimmedA28.kallisto_out", "trimmedA29.kallisto_out", "trimmedA3.kallisto_out", "trimmedA31.kallisto_out", "trimmedA32.kallisto_out", "trimmedA33.kallisto_out", "trimmedA34.kallisto_out", "trimmedA37.kallisto_out", "trimmedA4.kallisto_out", "trimmedA42.kallisto_out", "trimmedA43.kallisto_out", "trimmedA45.kallisto_out", "trimmedA51.kallisto_out", "trimmedA53.kallisto_out", "trimmedA54.kallisto_out", "trimmedA55.kallisto_out", "trimmedA57.kallisto_out", "trimmedA58.kallisto_out", "trimmedA59.kallisto_out", "trimmedA60.kallisto_out", "trimmedA61.kallisto_out", "trimmedA62.kallisto_out", "trimmedA65.kallisto_out", "trimmedA7.kallisto_out", "trimmedA70.kallisto_out", "trimmedA73.kallisto_out", "trimmedA74.kallisto_out", "trimmedA76.kallisto_out", "trimmedA78.kallisto_out", "trimmedA79.kallisto_out", "trimmedA8.kallisto_out", "trimmedA80.kallisto_out", "trimmedA81.kallisto_out", "trimmedA85.kallisto_out", "trimmedA86.kallisto_out", "trimmedA88.kallisto_out", "trimmedA90.kallisto_out", "trimmedA91.kallisto_out", "trimmedA93.kallisto_out", "trimmedA94.kallisto_out", "trimmedA95.kallisto_out", "trimmedA96.kallisto_out", "trimmedA97.kallisto_out", "trimmedA98.kallisto_out")
colnames(all_tpm) <- c("trimmedA10.kallisto_out", "trimmedA101.kallisto_out", "trimmedA102.kallisto_out", "trimmedA11.kallisto_out", "trimmedA112.kallisto_out", "trimmedA114.kallisto_out", "trimmedA116.kallisto_out", "trimmedA12.kallisto_out", "trimmedA121.kallisto_out", "trimmedA124.kallisto_out", "trimmedA126.kallisto_out", "trimmedA13.kallisto_out", "trimmedA132.kallisto_out", "trimmedA133.kallisto_out", "trimmedA145.kallisto_out", "trimmedA148.kallisto_out", "trimmedA154.kallisto_out", "trimmedA156.kallisto_out", "trimmedA158.kallisto_out", "trimmedA160.kallisto_out", "trimmedA164.kallisto_out", "trimmedA165.kallisto_out", "trimmedA168.kallisto_out", "trimmedA169.kallisto_out", "trimmedA171.kallisto_out", "trimmedA174.kallisto_out", "trimmedA175.kallisto_out", "trimmedA177.kallisto_out", "trimmedA18.kallisto_out", "trimmedA184.kallisto_out", "trimmedA186.kallisto_out", "trimmedA191.kallisto_out", "trimmedA192.kallisto_out", "trimmedA193.kallisto_out", "trimmedA196.kallisto_out", "trimmedA197.kallisto_out", "trimmedA199.kallisto_out", "trimmedA200.kallisto_out", "trimmedA207.kallisto_out", "trimmedA210.kallisto_out", "trimmedA212.kallisto_out", "trimmedA213.kallisto_out", "trimmedA214.kallisto_out", "trimmedA217.kallisto_out", "trimmedA22.kallisto_out", "trimmedA220.kallisto_out", "trimmedA221.kallisto_out", "trimmedA223.kallisto_out", "trimmedA229.kallisto_out", "trimmedA23.kallisto_out", "trimmedA232.kallisto_out", "trimmedA233.kallisto_out", "trimmedA28.kallisto_out", "trimmedA29.kallisto_out", "trimmedA3.kallisto_out", "trimmedA31.kallisto_out", "trimmedA32.kallisto_out", "trimmedA33.kallisto_out", "trimmedA34.kallisto_out", "trimmedA37.kallisto_out", "trimmedA4.kallisto_out", "trimmedA42.kallisto_out", "trimmedA43.kallisto_out", "trimmedA45.kallisto_out", "trimmedA51.kallisto_out", "trimmedA53.kallisto_out", "trimmedA54.kallisto_out", "trimmedA55.kallisto_out", "trimmedA57.kallisto_out", "trimmedA58.kallisto_out", "trimmedA59.kallisto_out", "trimmedA60.kallisto_out", "trimmedA61.kallisto_out", "trimmedA62.kallisto_out", "trimmedA65.kallisto_out", "trimmedA7.kallisto_out", "trimmedA70.kallisto_out", "trimmedA73.kallisto_out", "trimmedA74.kallisto_out", "trimmedA76.kallisto_out", "trimmedA78.kallisto_out", "trimmedA79.kallisto_out", "trimmedA8.kallisto_out", "trimmedA80.kallisto_out", "trimmedA81.kallisto_out", "trimmedA85.kallisto_out", "trimmedA86.kallisto_out", "trimmedA88.kallisto_out", "trimmedA90.kallisto_out", "trimmedA91.kallisto_out", "trimmedA93.kallisto_out", "trimmedA94.kallisto_out", "trimmedA95.kallisto_out", "trimmedA96.kallisto_out", "trimmedA97.kallisto_out", "trimmedA98.kallisto_out")
# now the data is ready

#####
#
# Plot total number of mapped reads to known genes: look for outliers of library size
#
#####

library(RColorBrewer)
colors <- brewer.pal(9, "Set1")
boxplot(log2(all_count+1), las=2) # before filter
boxplot(log2(filtered.all.count+1), las=2) # after filter

#####
#
# Drop any poor quality libraries IF NEEDED
#
#####
drops <- c("","")  # list the library names to be removed here
filtered.all.count <- filtered.all.count[,!(names(filtered.all.count) %in% drops)]
all_tpm <- all_tpm[,!(names(all_tpm) %in% drops)]
groups <- groups[!(groups$Sample.ID %in% drops),]
boxplot(log2(filtered.all.count+1), las=2) # visualize again

##########
#
# Set up differential gene expression (DGE) analysis, generate summary plots:
#   define a model matrix
#   estimate dispersion
#   make a plot of biological coefficient of variation vs. log(CPM)
#   make a multidimensional scaling plot of total counts
#   fit GLM for each transcript
#
##########

#The combined factor method...the method I used due to my experimental design
# Create a grouping factor to identify what rearing elevation and temperature treatment each sample is assigned
#Extract the rows of the "groups" object as vectors and convert those vectors into factors
Rearing_Elevation_vector <- as.vector(groups[1,]) #1 represents the desired row to convert to vector, #groups is data frame, #change Rearing_Elevation_vector to desired name (Rearing_Elevation, Treatment, etc)
Rearing_Elevation <- factor(Rearing_Elevation_vector) #convert the new vectors into factors
Temperature_vector <- as.vector(groups[2,])
Temperature <- factor(Temperature_vector)
# If needed, Relevel the factors Rearing_Elevation and Treatment so "NaturalElev" and "Control" are set as references, respectively.
Rearing_Elevation <- relevel(Rearing_Elevation, ref="Natural")
Treatment <- relevel(Treatment, ref="Control")
#paste those factors together to create final grouping factor, ElevTempGroups
ElevTempGroups <- factor(paste(Rearing_Elevation,Treatment, sep=".")
# DGEList makes an EdgeR object
y <- DGEList(counts=all_count, group=ElevTempGroups) # group is Rearing_Elevation and Treatment
design <- model.matrix(~0+ElevTempGroups, data=y$samples) # crossed design, same as (~Rearing_Elevation + Treatment + Rearing_Elevation:Treatment ... see section 3.3.4 in edgeR documentation, and double check this meaning with a statistician
colnames(design) <- levels(ElevTempGroups)

###Another method that COULD be used if experimental design allows, I got this method from JS's RKC script and did not modify it. must remove "#'s in front of commands if you'd like to run this one
# DGEList makes an EdgeR object
#y <- DGEList(counts=all_count, group=group)
# define the statistical model, a design matrix using the model.matrix function
#design <- model.matrix(~pH*temp, data=y$samples) # crossed design, same as (~ pH + temp + pH:temp ... see section 3.3.4 in edgeR documentation, and double check this meaning with a statistician
# view the design matrix
#design
#colnames(design)

# filter out transcripts that do not have at least two reads out of 1,000,000 reads mapped in at least 4 samples
y <- y[rowSums(1e+06 * y$counts/expandAsMatrix(y$samples$lib.size, dim(y)) > 2) >= 4, ]
# reset the library sizes after filtering
y$samples$lib.size <- colSums(y$counts)
# TMM normalization compensates not just for library size but also the relative expression level among transcripts
y <- calcNormFactors(y)
# estimate dispersion for GLM fit, common, trended, and tagwise at one time
y <- estimateDisp(y,design)
# see edgeR docs for references on dispersion estimates, e.g., "?estimateGLMCommonDisp"
# plot genewise biological coefficient of variation against gene abundance
plotBCV(y)
# make plot as a pdf
pdf(file=paste(out_dir, "BCV_plot.pdf", sep=""), height=6, width=6)
plotBCV(y, main = "Biological Coefficient of Variation")
dev.off()
# MDS plot
plotMDS(y , main = "MDS Plot for Count Data", labels = colnames( y$counts ), cex=0.5)
# make a pdf
pdf(file=paste(out_dir, "MDS_plot.pdf", sep=""), height=6, width=6)
plotMDS(y , main = "MDS Plot for Count Data", labels = ElevTempGroups, cex=0.5)
dev.off()

pdf(file=paste(out_dir, "MDS_plotGenotype.pdf", sep=""), height=6, width=6)
plotMDS(y , main = "MDS Plot for Count Data", labels = MitonuclearGroup, cex=0.5)
dev.off()

boxplot(log2(y$counts+1), cex.lab=0.5, cex.axis=0.7, las=2, main="After filter") # before filter
#####
#
# GLM
#
#####

# fit the negative binomial generalized linear model (GLM) for each tag, creating a new fit object
fit <- glmFit(y, design)
# double check your glmFit is structured correctly 
colnames(fit) 

# make contrasts
my.contrasts <- makeContrasts(
HeatShockNatural = NaturalElev.HeatTreat - NaturalElev.Control, #effect of heat shock in natural elevation reared beetles
HeatShockLow = LowElev.HeatTreat - LowElev.Control, #effect of heat shock in low elevation reared beetles
LowElevControl = LowElev.Control - NaturalElev.Control, #effect of low elevation rearing for control temp beetles
LowElevHeatShock = LowElev.HeatTreat - NaturalElev.HeatTreat, #effect of low elevation rearing for heat shock beetles
LowElevandHeat = LowElev.HeatTreat - NaturalElev.Control, #effect of low elevation rearing and heat shock together
LowElevHeatvsControl = (LowElev.HeatTreat - NaturalElev.HeatTreat) - (LowElev.Control - NaturalElev.Control), #genes that respond differently to low elevation rearing in heat shock vs control temp beetles 
HeatShockLowElevVsNatural = (LowElev.HeatTreat - LowElev.Control) - (NaturalElev.HeatTreat - NaturalElev.Control), #genes that respond differently to heat shock in low elevation vs natural elevation reared beetles 
levels=design)

# perform likelihood ratio tests for various comparisons, generating LRT object for each

### LRT interaction term comparisons
lrt_HeatShockNatural <- glmLRT(fit, contrast=my.contrasts[,"HeatShockNatural"])
lrt_HeatShockLow <- glmLRT(fit, contrast=my.contrasts[,"HeatShockLow"])
lrt_LowElevControl <- glmLRT(fit, contrast=my.contrasts[,"LowElevControl"])
lrt_LowElevHeatShock <- glmLRT(fit, contrast=my.contrasts[,"LowElevHeatShock"])
lrt_LowElevandHeat <- glmLRT(fit, contrast=my.contrasts[,"LowElevandHeat"])
lrt_LowElevHeatvsControl <- glmLRT(fit, contrast=my.contrasts[,"LowElevHeatvsControl"])
lrt_HeatShockLowElevVsNatural <- glmLRT(fit, contrast=my.contrasts[,"HeatShockLowElevVsNatural"])

#####
#
# Find significantly differentially expressed genes between comparisons
#
#####

#####
# Function: get_DEGs
# perform LRT (likelihood ratio test) on certain factors
# returns a data frame that contains both toptags and annotation data
# arguments:
#   lrt = glmLRT object of the comparison you're making
#   annot = transcripts annotation data frame
#   fdr = false discovery rate (default 0.05)
#   critFC = a threshold fold change (default 2-fold)
#   onlyAnnot = flag whether to save only annotated transcripts
#
# saves files:
#   .pdf of the MA plot
#   .csv file of topTags, filtered by critical FC and onlyAnnot flag
#   
##### Lines 228-229- Have an error here I need to fix with the comparison being automatically generated from cp, saving different contrasts as the same csv file

get_DEGs <- function(lrt, annot, fdr=0.05, critFC=2, onlyAnnot=FALSE) {
  DEG <- summary(decideTestsDGE(lrt, p=fdr, adjust="BH")) # gives numbers of genes up and downregulated at FDR < pval
  Num_DEG <- (DEG[1] + DEG[-1])[2] # gets total number of DEGs based on the FDR
  tTags <- topTags(lrt, n=Num_DEG) # gets a list of DEGs, "topTags"
  cp <- unlist(strsplit(tTags$comparison, "[* ]"))
  comp <- paste(cp[2], "v", cp[4], sep="") # this and the preceding line make a cleaner text format for the "comparison," used in filenames
  cat("Comparison:", comp, "\n")
  cat("Total number of genes:", nrow(lrt$table), "\n")
  cat("Number of differentially expressed genes with FDR <", fdr, "=", nrow(tTags), "\n")
  # write an MA Plot .pdf
  cat("...saving an MAplot:", paste(out_dir,"MAplot_", comp, "_FDR_", fdr, ".pdf", sep=""), "\n" )
  pdf(file=paste(out_dir,"MAplot_", comp, "_FDR_", fdr, ".pdf", sep=""), height=6, width=6)
  detags <- rownames(tTags$table) # n= has to be the number of significantly differentially expressed genes
  plotSmear(lrt,de.tags=detags, cex=0.5) # plot of fold change given CPM, red for those < FDR
  abline(h=c(-1,1), col="dodgerblue") # blue line at twofold change
  dev.off()
  # Merge annotations with DGE stats
  tTags_frame <- tTags$table # make data frame from tTags
  tTags_frame$transcript_id <- rownames(tTags_frame)
  join <- merge(tTags_frame, annot) # gets the intersection of detags and transcripts, i.e., the annotations for the DE transcripts
  # Some summary stats
  cat("percent all transcripts with ORFs:", sum(annot$prot_id != ".") * 100 / nrow(annot), "\n")
  cat("percent toptags with ORFs:", sum(join$prot_id != ".") * 100 / nrow(join), "\n")
  cat("percent all transcripts with Pfam or BlastX or BlastP annotation:", sum((annot$Pfam != ".") | (annot$sprot_Top_BLASTX_hit != ".") | (annot$sprot_Top_BLASTP_hit != ".")) * 100 / nrow(annot), "\n")
  cat("percent toptags with Pfam or BlastX or BlastP annotation:", sum((join$Pfam != ".") | (join$sprot_Top_BLASTP_hit != ".") | (join$sprot_Top_BLASTX_hit != ".")) * 100 / nrow(join), "\n")
  cat("number of genes upregulated, (FC > ", critFC, "):", sum(join$logFC > log2(critFC)), "\n")
  cat("number of genes downregulated, (FC < ", 1/critFC, "):", sum(join$logFC < -log2(critFC)), "\n")
  join <- join[ abs(join$logFC) > log2(critFC) , ]
  # write a csv and return the relevant dataframe
  if(onlyAnnot) {
    cat("saving .csv of up or downregulated genes, given critical FC, with only annotated sequences:", paste(out_dir, "topTags_", comp, "_", "critFC", critFC, "_", fdr, "FDR_only_w_Annot.csv", sep="" ))
    write.csv( join[ (join$Pfam != ".") | (join$sprot_Top_BLASTX_hit != ".") | (join$sprot_Top_BLASTP_hit != ".") , ], file=paste(out_dir, "topTags_", comp, "_", "critFC", critFC, "_", fdr, "FDR_only_w_Annot.csv", sep="" ) )
    return(join[ (join$Pfam != ".") | (join$sprot_Top_BLASTX_hit != ".") | (join$sprot_Top_BLASTP_hit != ".") , ])
  } else {
    cat("saving .csv of up/downregulated genes, given a critical FC:", paste(out_dir, "topTags_", comp, "_", "critFC", critFC, "_", fdr, "FDR.csv", sep="" ))
    write.csv( join, file=paste(out_dir, "topTags_", comp, "_", "critFC", critFC, "_", fdr, "FDR.csv", sep="" ) )
    return(join)    
  }
}
# display the coefficients
colnames(fit)

# get lists of differentially expressed genes from each comparison using getDEGs function
DEGlist_lrt_HeatShockLow <- get_DEGs(lrt_HeatShockLow, annot=transcripts, fdr=0.01, critFC=2)
DEGlist_lrt_HeatShockLowElevVsNatural <- get_DEGs(lrt_HeatShockLowElevVsNatural, annot=transcripts, fdr=0.01, critFC=2)
DEGlist_lrt_HeatShockNatural <- get_DEGs(lrt_HeatShockNatural, annot=transcripts, fdr=0.01, critFC=2)
DEGlist_lrt_LowElevandHeat <- get_DEGs(lrt_LowElevandHeat, annot=transcripts, fdr=0.01, critFC=2)
DEGlist_lrt_LowElevControl <- get_DEGs(lrt_LowElevControl, annot=transcripts, fdr=0.01, critFC=2)
DEGlist_lrt_LowElevHeatShock <- get_DEGs(lrt_LowElevHeatShock, annot=transcripts, fdr=0.01, critFC=2)
DEGlist_lrt_LowElevHeatvsControl <- get_DEGs(lrt_LowElevHeatvsControl, annot=transcripts, fdr=0.01, critFC=2)

###get the combined unique DEG lists for Temperature comparisons, Elevation comparisons, and ALL comparisons

CA_DEGlist_HeatShock <- rbind(DEGlist_lrt_HeatShockLow,DEGlist_lrt_HeatShockNatural )
unique_HeatShock_DE_transcripts <- unique(CA_DEGlist_HeatShock$transcript_id)
length(unique_HeatShock_DE_transcripts) # number of uniquely differentially expressed transcripts across heat shock comparisons
write.csv(unique_HeatShock_DE_transcripts, paste(out_dir, "HeatShock_comparison_DEG_list.csv", sep=""))

CA_DEGlist_LowElev <- rbind(DEGlist_lrt_LowElevControl, DEGlist_lrt_LowElevHeatShock)
unique_LowElev_DE_transcripts <- unique(CA_DEGlist_LowElev$transcript_id)
length(unique_LowElev_DE_transcripts) # number of uniquely differentially expressed transcripts across low elevation comparisons
write.csv(unique_LowElev_DE_transcripts, paste(out_dir, "LowElev_comparison_DEG_list.csv", sep=""))

CA_DEGlist_all <- rbind(DEGlist_lrt_HeatShockLow, DEGlist_lrt_HeatShockLowElevVsNatural, DEGlist_lrt_HeatShockNatural, DEGlist_lrt_LowElevandHeat, DEGlist_lrt_LowElevControl, DEGlist_lrt_LowElevHeatShock, DEGlist_lrt_LowElevHeatvsControl)
unique_all_DE_transcripts <- unique(CA_DEGlist_all$transcript_id)
length(unique_all_DE_transcripts) # number of uniquely differentially expressed transcripts across temp comparisons
write.csv(unique_all_DE_transcripts, paste(out_dir, "all_comparison_DEG_list.csv", sep=""))

#
##
### Now get unique DGEList for EACH contrast###
###
##
#

unique_HeatShock_Low_DE_transcripts <- unique(DEGlist_lrt_HeatShockLow$transcript_id)
length(unique_HeatShock_Low_DE_transcripts) # number of uniquely differentially expressed transcripts across heat shock low elev 
write.csv(unique_HeatShock_Low_DE_transcripts, paste(out_dir, "HeatShock_Low_DEG_list.csv", sep=""))

unique_HeatShock_Natural_DE_transcripts <- unique(DEGlist_lrt_HeatShockNatural$transcript_id)
length(unique_HeatShock_Natural_DE_transcripts) # number of uniquely differentially expressed transcripts across heat shock nat elev 
write.csv(unique_HeatShock_Natural_DE_transcripts, paste(out_dir, "HeatShock_Natural_DEG_list.csv", sep=""))

unique_LowElev_Control_DE_transcripts <- unique(DEGlist_lrt_LowElevControl$transcript_id)
length(unique_LowElev_Control_DE_transcripts) # number of uniquely differentially expressed transcripts across low elevation control
write.csv(unique_LowElev_Control_DE_transcripts, paste(out_dir, "LowElev_Control_DEG_list.csv", sep=""))

unique_LowElev_HeatShock_DE_transcripts <- unique(DEGlist_lrt_LowElevHeatShock$transcript_id)
length(unique_LowElev_HeatShock_DE_transcripts) # number of uniquely differentially expressed transcripts across low elevation heat shock
write.csv(unique_LowElev_HeatShock_DE_transcripts, paste(out_dir, "LowElev_HeatShock_DEG_list.csv", sep=""))

unique_HeatShockLowElevVsNatural_DE_transcripts <- unique(DEGlist_lrt_HeatShockLowElevVsNatural$transcript_id)
length(unique_HeatShockLowElevVsNatural_DE_transcripts) # number of uniquely differentially expressed transcripts across heat shock comparisons in low vs natural elev beetles
write.csv(unique_HeatShockLowElevVsNatural_DE_transcripts, paste(out_dir, "unique_HeatShockLowElevVsNatural_DE_transcripts", sep=""))

unique_LowElevHeatvsControl_DE_transcripts <- unique(DEGlist_lrt_LowElevHeatvsControl$transcript_id)
length(unique_LowElevHeatvsControl_DE_transcripts)# number of uniquely differentially expressed transcripts across low elev comparisons in heat shock vs control beetles
write.csv(unique_LowElevHeatvsControl_DE_transcripts, paste(out_dir, "unique_LowElevHeatvsControl_DE_transcripts", sep=""))

unique_LowElevandHeat_DE_transcripts <- unique(DEGlist_lrt_LowElevandHeat$transcript_id)
length(unique_LowElevandHeat_DE_transcripts)# number of uniquely differentially expressed transcripts across low elev comparisons in heat shock vs control beetles
write.csv(unique_LowElevandHeat_DE_transcripts, paste(out_dir, "unique_LowElevandHeat_DE_transcripts.csv", sep=""))



#####
#
# write cluster files
#
#####


write.cluster.file <- function(all_tpm, unique_DE_transcripts, outfile, cnames) {
  # make matrix of tpm values using only those transcripts found in all targetList
  TPM_all <- data.matrix(all_tpm[(rownames(all_tpm) %in% unique_DE_transcripts),])
  # log2 transform, mean center rows
  TPM_all = log2(TPM_all+1)
  centered_data = t(scale(t(TPM_all), scale=F)) # center rows, mean substracted
  # make data frame of centered_data matrix
  centeredDF <- as.data.frame(centered_data)
  # concatenate column names from groupings to make the column names more informative
  colnames(centeredDF) <- cnames
  # add CloneID vector to centeredDF
  centeredDF$CloneID <- rownames(centered_data)
  # get vector of cloneID
  cloneIDs <- centeredDF$CloneID
  ### generate a new vector of topBlastHits for those cloneIDs
  # generate a subset data frame of the matches to transcript_id in the annotation dataframe; this makes the search in the loop below much faster
  annot_matches <- transcripts[(transcripts$transcript_id %in% cloneIDs),]
  # initialize an empty vector
  blasthits <- c()
  # iterate over cloneID in centeredDF, appending each topBlastHit to the blasthits vector
  for (cloneID in centeredDF$CloneID) {
    match <- annot_matches[annot_matches$transcript_id %in% cloneID,]
    blasthits <- c(blasthits, match$sprot_Top_BLASTX_hit[1])
  }
  # add blasthits vector to centeredDF "NAME" column
  centeredDF$NAME <- blasthits
  # reorder columns
  centeredDF <- centeredDF[,c(ncol(centeredDF)-1,ncol(centeredDF),1:(ncol(centeredDF)-2))] # more generalized form
  # save centeredDF 
  write.table(centeredDF, file=outfile, quote=FALSE, row.names=FALSE, sep="\t")
}

#broad DGE lists I want to make cluster files for
#unique_all_DE_transcripts
#unique_HeatShock_DE_transcripts
#unique_LowElev_DE_transcripts
#smaller lists
#unique_HeatShock_Low_DE_transcripts
#unique_HeatShock_Natural_DE_transcripts
#unique_LowElev_Control_DE_transcripts
#unique_LowElev_HeatShock_DE_transcripts
#unique_HeatShockLowElevvsNatural_DE_transcripts
#unique_LowElevHeatvsControl_DE_transcripts
#unique_LowElevandHeat_DE_transcripts

# concatenate column names from sample ID and groupings to make the column names more informative
# function to concatenate names
concat_name <- function(x){
  paste(x[1],x[2],sep="_")
}

# make a data frame of the sample ID and groupings
sampleDF <- data.frame(sample=colnames(all_tpm), treatment=ElevTempGroups)
sampleNames <- apply(sampleDF, 1, concat_name)
sampleNames

#the cluster file we want
write.cluster.file(all_tpm, unique_all_DE_transcripts, paste(out_dir, "centered_data_AllDEGs.txt", sep=""), sampleNames)

#OPTIONAL cluster files you can make for extra work or fun
write.cluster.file(all_tpm, unique_HeatShock_DE_transcripts, paste(out_dir, "centered_data_AllHeatShock.txt", sep=""), sampleNames)
write.cluster.file(all_tpm, unique_LowElev_DE_transcripts, paste(out_dir, "centered_data_AllLowElev.txt", sep=""), sampleNames)
write.cluster.file(all_tpm, unique_HeatShock_Low_DE_transcripts, paste(out_dir, "centered_data_HeatShock_Low.txt", sep=""), sampleNames)
write.cluster.file(all_tpm, unique_HeatShock_Natural_DE_transcripts, paste(out_dir, "centered_data_HeatShock_Natural.txt", sep=""), sampleNames)
write.cluster.file(all_tpm, unique_LowElev_Control_DE_transcripts, paste(out_dir, "centered_data_LowElev_Control.txt", sep=""), sampleNames)
write.cluster.file(all_tpm, unique_LowElev_HeatShock_DE_transcripts, paste(out_dir, "centered_data_LowElev_HeatShock.txt", sep=""), sampleNames)
write.cluster.file(all_tpm, unique_HeatShockLowElevVsNatural_DE_transcripts, paste(out_dir, "centered_data_HeatShockLowElevvsNatural.txt", sep=""), sampleNames)
write.cluster.file(all_tpm, unique_LowElevHeatvsControl_DE_transcripts, paste(out_dir, "centered_data_LowElevHeatvsControl.txt", sep=""), sampleNames)
write.cluster.file(all_tpm, unique_LowElevandHeat_DE_transcripts, paste(out_dir, "centered_data_LowElevandHeat.txt", sep=""), sampleNames)

##From here, you can take the file that you get from the write.cluster.file containing all DEGs to input into Cluster 3.0 and Tree View!##

##Joanna didn't do this chunk#
#
# ??????????????????Get all the transcripts that were being used (for annotation of less than all the data)?????????????????????????????
#I'm unsure what this will be used for right now and whether or not it's formatted properly
#?????ALL_CA_transcripts = rownames(lrt_inter_0$table)??????
#write.table(ALL_CA_transcripts,"All_CA_transcriptID.txt", quote=FALSE, row.names=FALSE, col.names=FALSE)
# # sort by logFC
# sorted_tags <- annotated_DEGs_pHlow[with(annotated_DEGs_pHlow, order(logFC)), ]
# 
# # write a .csv based on a threshold FC, in this case, ( FC < 0.5 ) and ( FC > 2 )
# write.csv(annotated_DEGs_pHlow[ abs(annotated_DEGs_pHlow$logFC) > 1 , ], file=paste( out_dir, "topTags_DEGlist_pHlow_FDR0_00001_PfamHits_logFC_greater_than_2.csv", sep="" )
#End of where Joanna didn't run# 

##Plotting DEGs in R##
#read in the .txt files for clustering in R
LowElevHeatvsControlCentered <- read.delim("~/DGE_analysis_output/centered_data_LowElevHeatvsControl.txt",stringsAsFactors=FALSE)
AllHeatShockCentered <- read.delim("~/DGE_analysis_output/centered_data_AllHeatShock.txt",stringsAsFactors=FALSE)
AllDEGsCentered <- read.delim("~/DGE_analysis_output/centered_data_AllDEGs.txt",stringsAsFactors=FALSE)

###
###GGPLOT###
###

#Gather all of the columns that represent each library and put them into one column "Library", name the resulting values column containing the TPM data for each library "LogTPM"
tpmDF <- gather(HeatShockCentered, "Library", "logTPM", 3:98)
LowEHeatvControltpmDF <- gather(LowElevHeatvsControlCentered, "Library", "logTPM", 3:98)
AllHeatShocktpmDF <- gather(AllHeatShockCentered, "Library", "logTPM", 3:98)


#Create Genotype character for column in "long" gene expression data frame, repeating each genotype 1,130 times for the 1,130 transcripts
Genotype <- rep(c("GA.BP", "GA.BP", "GA.BP", "GG.BP", "AA.BP", "GG.BP", "GA.BP", "GA.BP", "GA.RC", "GG.RC", "AA.BP", "AA.BP", "GA.RC", "GA.RC", "GA.RC", "GG.RC", "GA.BP", "AA.RC", "GA.RC",
      "GG.RC", "GA.RC", "AA.BP", "GG.BP", "GG.RC", "GG.RC", "AA.RC", "GG.RC", "AA.BP", "GG.BP", "GA.RC", "GG.BP", "GG.BP", "GA.RC", "GA.RC", "GA.RC", "GA.BP", "GA.RC", "GG.RC",
      "GG.RC", "AA.BP", "GA.RC", "GA.BP", "GG.RC", "AA.BP", "AA.BP", "GA.RC", "GG.RC", "GG.RC", "GA.BP", "AA.RC", "AA.BP", "AA.BP", "GG.RC", "AA.RC", "GA.RC", "GG.RC", "GG.BP",
      "GG.BP", "GA.BP", "GG.BP", "GG.BP", "AA.BP", "GG.RC", "GG.BP", "GA.RC", "GG.RC", "GA.BP", "GA.BP", "GA.BP", "GG.BP", "GA.BP", "GA.BP", "GA.BP", "AA.RC", "GA.BP", "GG.RC",
      "AA.BP", "GG.RC", "GG.BP", "AA.RC", "GA.RC", "GA.RC", "AA.BP", "GG.RC", "GA.BP", "AA.RC", "GA.RC", "AA.BP", "GG.BP", "AA.BP", "AA.BP", "GA.BP", "GA.BP", "GA.BP", "GG.BP",
      "GG.BP"), each = 1130)
GenotypeLowHeatvsCont <- rep(c("GA.BP", "GA.BP", "GA.BP", "GG.BP", "AA.BP", "GG.BP", "GA.BP", "GA.BP", "GA.RC", "GG.RC", "AA.BP", "AA.BP", "GA.RC", "GA.RC", "GA.RC", "GG.RC", "GA.BP", "AA.RC", "GA.RC",
                  "GG.RC", "GA.RC", "AA.BP", "GG.BP", "GG.RC", "GG.RC", "AA.RC", "GG.RC", "AA.BP", "GG.BP", "GA.RC", "GG.BP", "GG.BP", "GA.RC", "GA.RC", "GA.RC", "GA.BP", "GA.RC", "GG.RC",
                  "GG.RC", "AA.BP", "GA.RC", "GA.BP", "GG.RC", "AA.BP", "AA.BP", "GA.RC", "GG.RC", "GG.RC", "GA.BP", "AA.RC", "AA.BP", "AA.BP", "GG.RC", "AA.RC", "GA.RC", "GG.RC", "GG.BP",
                  "GG.BP", "GA.BP", "GG.BP", "GG.BP", "AA.BP", "GG.RC", "GG.BP", "GA.RC", "GG.RC", "GA.BP", "GA.BP", "GA.BP", "GG.BP", "GA.BP", "GA.BP", "GA.BP", "AA.RC", "GA.BP", "GG.RC",
                  "AA.BP", "GG.RC", "GG.BP", "AA.RC", "GA.RC", "GA.RC", "AA.BP", "GG.RC", "GA.BP", "AA.RC", "GA.RC", "AA.BP", "GG.BP", "AA.BP", "AA.BP", "GA.BP", "GA.BP", "GA.BP", "GG.BP",
                  "GG.BP"), each = 216)
GenotypeAllHeat <- rep(c("GA.BP", "GA.BP", "GA.BP", "GG.BP", "AA.BP", "GG.BP", "GA.BP", "GA.BP", "GA.RC", "GG.RC", "AA.BP", "AA.BP", "GA.RC", "GA.RC", "GA.RC", "GG.RC", "GA.BP", "AA.RC", "GA.RC",
                               "GG.RC", "GA.RC", "AA.BP", "GG.BP", "GG.RC", "GG.RC", "AA.RC", "GG.RC", "AA.BP", "GG.BP", "GA.RC", "GG.BP", "GG.BP", "GA.RC", "GA.RC", "GA.RC", "GA.BP", "GA.RC", "GG.RC",
                               "GG.RC", "AA.BP", "GA.RC", "GA.BP", "GG.RC", "AA.BP", "AA.BP", "GA.RC", "GG.RC", "GG.RC", "GA.BP", "AA.RC", "AA.BP", "AA.BP", "GG.RC", "AA.RC", "GA.RC", "GG.RC", "GG.BP",
                               "GG.BP", "GA.BP", "GG.BP", "GG.BP", "AA.BP", "GG.RC", "GG.BP", "GA.RC", "GG.RC", "GA.BP", "GA.BP", "GA.BP", "GG.BP", "GA.BP", "GA.BP", "GA.BP", "AA.RC", "GA.BP", "GG.RC",
                               "AA.BP", "GG.RC", "GG.BP", "AA.RC", "GA.RC", "GA.RC", "AA.BP", "GG.RC", "GA.BP", "AA.RC", "GA.RC", "AA.BP", "GG.BP", "AA.BP", "AA.BP", "GA.BP", "GA.BP", "GA.BP", "GG.BP",
                               "GG.BP"), each = 1594)

#Add Genotype column to the DF
tpmDF$Genotype <- Genotype
LowEHeatvControltpmDF$Genotype <- GenotypeLowHeatvsCont
AllHeatShocktpmDF$Genotype <- GenotypeAllHeat

#Plot Genotype Vs logTPM
GGHeatShockLow <- ggplot(data = tpmDF, mapping = aes(x = Genotype, y = logTPM)) +
  geom_boxplot() + geom_point(alpha = 0.7) #or geom_jitter(alpha = .5,width = .1)
print(GGHeatShockLow)

GGLowElevHeatvsControl <- ggplot(data = LowEHeatvControltpmDF, mapping = aes(x = Genotype, y = logTPM)) +
  geom_boxplot() + geom_point(alpha = 0.7) #or geom_jitter(alpha = .5,width = .1)
print(GGLowElevHeatvsControl)

GGAllHeatShock <- ggplot(data = AllHeatShocktpmDF, mapping = aes(x = Genotype, y = logTPM)) +
  geom_boxplot() + geom_point(alpha = 0.7) #or geom_jitter(alpha = .5,width = .1)
print(GGAllHeatShock)



###
####MDS PLOTS###
###

#MDS plot (1/2 dimensions) using Treatment/Elevation groups printed out as words, MDS_plot_ElevandTemp.pdf
par(mfrow=c(1,1)) #return to just one plot per view
plotMDS(y , main = "MDS Plot for Count Data", labels = colnames( y$counts ), cex=0.5)
# make a pdf
pdf(file=paste(out_dir, "MDS_plot_ElevandTemp.pdf", sep=""), height=6, width=6)
plotMDS(y , main = "MDS Plot for Count Data", labels = ElevTempGroups, cex=0.5)
dev.off()

#Version with symbols---Plot MDS plots beside each other to look at Treatment versus Genotype, save as MDS_TreatmentvsGenotype.pdf
par(mfrow=c(1,2))
col.temptreat <- c("blue","red","blue","red")[ElevTempGroups]
char.elevation <- c(16,16,1,1)[ElevTempGroups]
plotMDS(y,col=col.temptreat,pch=char.elevation,cex=1)#Plot MDS plots beside each other to look at Treatment versus Genotype, save as MDS_TreatmentvsGenotype.pdf
# Let's add a legend to the plot so we know which colours correspond to which cell type
legcolorElevTemp <- c("blue", "red", "blue", "red")
legend("bottomleft",col=legcolorElevTemp,pch=c(16,16,1,1),legend=levels(ElevTempGroups), cex = 0.6)
# Add a title
title("Treatment")
col.genotype <- c("red", "blue","red","blue", "red", "blue")[MitonuclearGroup]
char.genotype <- c(1,1,16,16,4,4)[MitonuclearGroup]
plotMDS(y,col=col.genotype, pch=char.genotype)
legcolorGenotype <- c("red", "blue","red","blue", "red", "blue")
legend("bottomleft",col=legcolorGenotype,pch=c(1,1,16,16,4,4),legend=levels(MitonuclearGroup),cex=0.6)
title("Genotype")

#Looking at the 3rd and 4th dimension
par(mfrow=c(1,1))
col.genotype <- c("red", "blue","red","blue", "red", "blue")[MitonuclearGroup]
plotMDS(y,dim=c(3,4),col=col.genotype,pch=char.genotype,cex=1)
legend("bottomleft",col=legcolorGenotype, pch=c(1,1,16,16,4,4),legend=levels(MitonuclearGroup))


###
##
#Clustering in R
##
###

TPMMatrix <- LowElevHeatvsControlCentered %>% select(-1)
gene_dist_LowHeatvControl <- dist(TPMMatrix)

head(gene_dist_LowHeatvControl)

gene_hclust <- hclust(gene_dist_LowHeatvControl, method = "complete")

# The default `plot()` function can be used to produce a simple dendrogram
plot(gene_hclust, labels = FALSE)
abline(h = 10, col = "brown", lwd = 2) # add horizontal line to illustrate cutting dendrogram

cutree(gene_hclust, k = 6)

gene_cluster <- cutree(gene_hclust, k = 6) %>% 
  # turn the named vector into a tibble
  enframe() %>% 
  # rename some of the columns
  rename(gene = name, cluster = value)

head(gene_cluster)

names(LowEHeatvControltpmDF)[names(LowEHeatvControltpmDF) == "CloneID"] <- "gene"

trans_tpm_cluster <- LowEHeatvControltpmDF %>% 
  inner_join(gene_cluster, by = "gene")

#Add Temp treatment to cluster file
TPMtreatment <- rep(Treatment,each=216)
trans_tpm_cluster$Treatment <-TPMtreatment

#Add Elevation to cluster file
TPMelevation <- rep(Rearing_Elevation,each=216)
trans_tpm_cluster$RearingElevation <-TPMelevation

#Plot clusters as Treatment as x axis and log scaled TPM as y axis
trans_tpm_cluster %>% 
  ggplot(aes(Treatment, logTPM)) +
  geom_line(aes(group = gene)) +
  facet_grid(rows = vars(Genotype), cols = vars(cluster))

#Plot clusters as Rearing Elevation as x axis and log scaled TPM as y axis
trans_tpm_cluster %>% 
  ggplot(aes(RearingElevation, logTPM)) +
  geom_line(aes(group = gene)) +
  geom_line(stat = "summary", fun = "median", colour = "brown", size = 1.5, 
            aes(group = 1)) +
  facet_grid(rows = vars(Genotype),cols = vars(cluster))

#Finally, here is an advanced ggplot2 trick to add a line to each facet showing the median expression in each cluster:
trans_tpm_cluster %>% 
  ggplot(aes(Treatment, logTPM)) +
  geom_line(aes(group = gene), alpha = 0.3) +
  geom_line(stat = "summary", fun = "median", colour = "brown", size = 1.5, 
            aes(group = 1)) +
  facet_grid(rows = vars(Genotype), cols = vars(cluster))

#Looks like Cluster 6 is interesting, I am going to subset the transcripts in cluster 6
Cluster6 <- subset(trans_tpm_cluster, cluster == 6)
#Do the same for Cluster 3
Cluster3 <- subset(trans_tpm_cluster, cluster == 3)
#Cluster 5
Cluster5 <- subset(trans_tpm_cluster, cluster == 5)


####
#Heatmap
####

#I want to annotate the columns by Library and Treatment
UniqueLibrary <- trans_tpm_cluster$Library
UniqueLibrary <- unique(UniqueLibrary)
annot_col <- data.frame(UniqueLibrary, Treatment)
rownames(annot_col) <- annot_col$UniqueLibrary
annot_col$UniqueLibrary <- NULL

#And now plot the heatmap!
str(TPMMatrix)
TPMMatrix <- as.matrix(TPMMatrix)
pheatmap(TPMMatrix, cluster_rows=TRUE, show_rownames=FALSE, show_colnames = FALSE, annotation_col=annot_col )


#editing the AllDEGsCentered file for Cluster
AllDEGS <- AllDEGsCentered %>%
  +     rename_at(vars(grep("trimmed", names(.))), ~Group1)


#######
#
# Read in DE gene table to redo MDS on just the differentially expressed genes
#
#####

newMDSdata=read.delim(file.choose(),sep="\t")
plotMDS(newMDSdata[,c(3:47)] , main = "MDS Plot of DE genes", labels = group, cex=0.7)



Back to JS script, unmodified by Joanna
##########
#
# Functions for genewise data analysis
#
##########



#####
#
# JS plyr version
#
#####
pH2=pH # use as.factor from group file, or make this as a factor
Temperature # use as.factor from group file, or make this as a factor

library(plyr)
library(ggplot2)

gene="comp102584_c11_seq1"

get_gene_data <- function(gene, all_fpkm) {
  gene_data <- data.frame(fpkm=as.numeric(all_fpkm[gene,]), pH=pH2, Temperature=temp)
  fpkm_mean<-ddply(gene_data,.(pH2,Temperature), function(d) mean(d$fpkm)) # if group file has columns called pH and Temperature
  SD<-ddply(gene_data,.(pH2,Temperature), function(d) sd(d$fpkm)) # if group file has columns called pH and Temperature
  names(fpkm_mean)=c("pH","Temperature","Mean") # rename
  names(SD)=c("pH","Temperature","SD") # rename
  out_frame=merge(fpkm_mean,SD) #make one data frame
  out_frame=out_frame[,c(3,4,1,2)] # reorder columns
  return(out_frame)
}

gene_data <- get_gene_data("comp102584_c11_seq1", all_fpkm)  #the gene in all_fpkm for which data will be returned

grep("comp102584_c11_seq1", all_fpkm)



####
# Function: get_gene_data
# examine expression of an individual gene based on transcript_id
# Scott's method
####
# 
# 
# 
# get_gene_data <- function(gene, fpkm) {
#   A_mean <- apply(fpkm[gene,1:5], 1, mean)
#   B_mean <- apply(fpkm[gene,6:10], 1, mean)
#   C_mean <- apply(fpkm[gene,11:15], 1, mean)
#   D_mean <- apply(fpkm[gene,16:20], 1, mean)
#   E_mean <- apply(fpkm[gene,21:25], 1, mean)
#   F_mean <- apply(fpkm[gene,26:30], 1, mean)
#   G_mean <- apply(fpkm[gene,31:35], 1, mean)
#   H_mean <- apply(fpkm[gene,36:40], 1, mean)
#   J_mean <- apply(fpkm[gene,41:45], 1, mean)
#   A_sd <- apply(fpkm[gene,1:5], 1, sd)
#   B_sd <- apply(fpkm[gene,6:10], 1, sd)
#   C_sd <- apply(fpkm[gene,11:15], 1, sd)
#   D_sd <- apply(fpkm[gene,16:20], 1, sd)
#   E_sd <- apply(fpkm[gene,21:25], 1, sd)
#   F_sd <- apply(fpkm[gene,26:30], 1, sd)
#   G_sd <- apply(fpkm[gene,31:35], 1, sd)
#   H_sd <- apply(fpkm[gene,36:40], 1, sd)
#   J_sd <- apply(fpkm[gene,41:45], 1, sd)
#   fpkm_mean <- c(A_mean, B_mean, C_mean, D_mean, E_mean, F_mean, G_mean, H_mean, J_mean)
#   SD <- c(A_sd, B_sd, C_sd, D_sd, E_sd, F_sd, G_sd, H_sd, J_sd)
#   names <- c("A", "B", "C", "D", "E", "F", "G", "H", "J")
#   pH_grp <- c("amb", "low", "amb", "low", "mid", "amb", "mid", "low", "mid")
#   temp_grp <- c("13C", "11C", "11C", "14C", "13C", "14C", "14C", "13C", "11C")
#   out_frame <- data.frame(fpkm_mean, SD, pH_grp, temp_grp, names)
#   out_frame$pH_grp <- factor( out_frame$pH_grp, levels = c( "amb", "mid", "low" ) )
#   return(out_frame)
# }

# get fpkm data for a specific gene
#gene_data <- get_gene_data("comp106087_c0_seq1", all_fpkm)


#####
# Function: get_annot
# gets annotation for a particular gene
#####

get_annot <- function(gene_in, annotation) {
  L <- annotation$transcript_id == gene_in
  cat("transcript: ", as.vector(annotation[L,]$transcript_id), "\n")
  cat("top blast hit: ", as.vector(annotation[L,]$Top_BLASTX_hit ), "\n")
  cat("gene ontology: ", as.vector(annotation[L,]$gene_ontology), "\n")
  cat("PFam: ", as.vector(annotation[L,]$Pfam), "\n")
  cat("Signal Peptide: ", as.vector(annotation[L,]$SignalP), "\n")
  cat("transmembrane domain: ", as.vector(annotation[L,]$TmHMM), "\n")
  cat("eggnog: ", as.vector(annotation[L,]$eggnog), "\n")
}

# test getting annotation data
#get_annot("comp99839_c0_seq1", transcripts)

#####
# Function: plot_genewise_fpkm
# plots fpkm for the specified gene
#####

# plot_genewise_fpkm <- function(gene_in, plot_title, add_title) {
#   k <- ggplot(gene_in, aes( x = temp_grp, y = fpkm_mean, ymax = fpkm_mean + SD, ymin = fpkm_mean - SD, fill = temp_grp ))
#   k + geom_bar(stat="identity") + facet_grid( . ~ pH_grp ) + geom_errorbar( width = 0.3) + scale_fill_brewer(type="qual", palette="Paired") + labs(title=paste(plot_title, add_title))
#   k + geom_bar(stat="identity") + facet_grid( . ~ pH_grp ) + geom_errorbar( width = 0.3) + scale_fill_brewer(type="qual", palette="Paired") + labs(title=paste(plot_title, add_title))
#   ggsave(filename = paste(out_dir, plot_title, "_", add_title, "_genewise_FPKM", ".pdf", sep =""), width = 6, height = 6)
#   }

# test plotting fpkm data
#plot_genewise_fpkm(gene_data, "titleA", "titleB")

#####
# function: plot_interaction
# makes an interaction plot for a given gene
#####

plot_interaction <- function(gene_data, plot_title, add_title) {
  h <- ggplot(gene_data, aes(x = pH, y = Mean, ymax = Mean + SD, ymin = Mean - SD, color=Temperature, fill=Temperature))
  h + geom_errorbar(color="black", width=0.1) + geom_point(aes(shape=Temperature, fill=Temperature),size = 4) + geom_line(aes(group=Temperature), size=0.5, linetype=1) + labs(title=paste(plot_title, add_title), x = "pH treatment", y = "mean FPKM") + scale_color_manual(values=c("#3399FF", "#66CC00", "#CC0066"))
  ggsave(filename = paste(out_dir, plot_title, "_", add_title, "_interactionPlot_FPKM", ".pdf", sep =""), width = 6, height = 6)
  }

#plot_interaction(gene_data,"TITLEA","TITLEB")
#####
# function: GOI_data
# master function to get data and plots from Gene Of Interest
#   gene_name: the "transcript_id" for your gene of interest
#   annotation: the full trinotate annotation report as a data frame
#   fpkm_table: the table of FPKM values 
#####

GOI_data <- function(gene_name, annotation, fpkm_table, graph_title) {
  gene_data <- get_gene_data(gene_name, fpkm_table)
  get_annot(gene_name, annotation)
  #plot_genewise_fpkm(gene_data, gene_name, graph_title)
  plot_interaction(gene_data, gene_name, graph_title)
}

# generate genewise plots based on a gene of interest
GOI_data("comp100107_c0_seq1", transcripts, all_fpkm, "Carbonic Anhydrase")

###
#
#  Example: read in a list of genes of interest, and make plots
#
###

desired_graphs = read.csv(file.choose())  #a text file with two columns, the geneID (gene_name) and a descriptor (graph_title)

outdir = "/Users/jonathonstillman/Documents/RKC_Transcriptomics/RKC2_Juveniles/GOIplots_temperature/"

for (i in 1:nrow(desired_graphs)) {
  GOI_data(desired_graphs[i,1], transcripts, all_fpkm, desired_graphs[i,2])
}



###########
#
# Functions for plotting clusters as interactions plots.
#
############

# read in the clustered median-centered log-2 FPKM data (from the .cdt file made by Cluster 3.0 software).  The file has had the E-weights removed, a column of clusters added, and saved as a .csv

clustereddata=read.csv(file.choose())

# prepare data for plotting using reshape
library(reshape)
clusterdata2=melt(clustereddata[,c(3:48)],id.var=c("Cluster"))
library(plyr)
library(ggplot2)
head(clusterdata2)
clusterdata2$group = substr(clusterdata2$variable,1,6)


Mean_by_cluster<-ddply(clusterdata2,.(Cluster,variable), function(d) mean(d$value)) # if group file has columns called pH and Temperature
sd_by_cluster<-ddply(clusterdata2,.(Cluster,variable), function(d) sd(d$value)) # if group file has columns called pH and Temperature
names(Mean_by_cluster)=c("cluster","group","Mean") # rename
names(sd_by_cluster)=c("cluster","group","SD") # rename
plotting_data_by_cluster=merge(Mean_by_cluster,sd_by_cluster) #make one data frame

#REDO WITH PROPER GLOBAL STANDARD DEVIATION AND STANDARD ERROR + 1.98*SE (95% conf. int.)

head(plotting_data_by_cluster)
pHbyCluster=c(rep(c(rep("8.0",5),rep("7.5",5),rep("8.0",5),rep("7.5",5),rep("7.8",5),rep("8.0",5),rep("7.8",5),rep("7.5",5),rep("7.8",5)),6))
TempbyCluster=c(rep(c(rep("13",5),rep("11",5),rep("11",5),rep("14",5),rep("13",5),rep("14",5),rep("14",5),rep("13",5),rep("11",5)),6))
Library_cluster_plot=c(rep(c(rep("A",5),rep("B",5),rep("C",5),rep("D",5),rep("E",5),rep("F",5),rep("G",5),rep("H",5),rep("J",5)),6))
new_plotting_data_by_cluster=cbind(plotting_data_by_cluster,pHbyCluster,TempbyCluster,Library_cluster_plot)
names(new_plotting_data_by_cluster)=c("Cluster","Library","Mean","SD","pH","Temperature","Group")
head(new_plotting_data_by_cluster)

# new plot data with data averaged per group at each pH and Temperature and cluster
new_plotting_data_by_cluster_avgd<-ddply(clusterdata2,.(Cluster,group), function(d) mean(d$value)) # if group file has columns called pH and Temperature
sd_by_cluster_avgd<-ddply(clusterdata2,.(Cluster,group), function(d) sd(d$value)) # if group file has columns called pH and Temperature
library(plotrix)
se_by_cluster_avgd<-ddply(clusterdata2,.(Cluster,group), function(d) std.error(d$value)) 
head(new_plotting_data_by_cluster_avgd)
names(new_plotting_data_by_cluster_avgd)=c("Cluster","Group","Mean") # rename
names(sd_by_cluster_avgd)=c("Cluster","Group","SD") # rename
names(se_by_cluster_avgd)=c("Cluster","Group","SE")
plotting_data_by_cluster_avgd=merge(new_plotting_data_by_cluster_avgd,sd_by_cluster_avgd)
plotting_data_by_cluster_avgd=merge(plotting_data_by_cluster_avgd,se_by_cluster_avgd)
plotting_data_by_cluster_avgd$pct=plotting_data_by_cluster_avgd$SE*1.98
#make one 
head(plotting_data_by_cluster_avgd)
plotting_data_by_cluster_avgd$pH = c(rep(c(rep("8.1",3),rep("7.5",3),rep("7.8",3))))
plotting_data_by_cluster_avgd$Temperature = c(rep(c("10.5","12.5","14.5"),3))
head(plotting_data_by_cluster_avgd)

#plot with SD
c <- ggplot(plotting_data_by_cluster_avgd, aes(x = pH, y = Mean, ymax = Mean + SD, ymin = Mean - SD, color=Temperature, fill=Temperature,group=Group))
c + geom_errorbar(color="black", width=0.1) + geom_point(aes(shape=Temperature, fill=Temperature),size = 4) + geom_line(aes(group=Temperature), size=0.5, linetype=1) + labs(title="Clusters (error bars are 1SD)",x = "pH treatment", y = "Median centered log2 FPKM") + scale_color_manual(values=c("#3399FF", "#66CC00", "#CC0066"))+facet_grid(~Cluster)

#plot with SEM
d <- ggplot(plotting_data_by_cluster_avgd, aes(x = pH, y = Mean, ymax = Mean + SE, ymin = Mean - SE, color=Temperature, fill=Temperature,group=Group))
d + geom_errorbar(color="black", width=0.1) + geom_point(aes(shape=Temperature, fill=Temperature),size = 4) + geom_line(aes(group=Temperature), size=0.5, linetype=1) + labs(title="Clusters (error bars are 1SEM)",x = "pH treatment", y = "Median centered log2 FPKM") + scale_color_manual(values=c("#3399FF", "#66CC00", "#CC0066"))+facet_grid(~Cluster)

#plot with 95% conf intervals
e <- ggplot(plotting_data_by_cluster_avgd, aes(x = pH, y = Mean, ymax = Mean + pct, ymin = Mean - pct, color=Temperature, fill=Temperature,group=Group))
e + geom_errorbar(color="black", width=0.1) + geom_point(aes(shape=Temperature, fill=Temperature),size = 3) + geom_line(aes(group=Temperature), size=0.5, linetype=1) + labs(title="Juvenile Cluster 7 (error bars are 95% conf. intervals)",x = "pH treatment", y = "Median centered log2 FPKM") + scale_color_manual(values=c("#3399FF", "#66CC00", "#CC0066"))+theme_bw()#+facet_grid(~Cluster)

## NOW - do a 2-way ANOVA (pH and T) for each Cluster with TUKEY HSD for PW comparisions
# subset the data by cluster
Cluster1_data=subset(clusterdata2,clusterdata2$Cluster==1)
Cluster1_data$pH = substr(Cluster1_data$group,1,3)
Cluster1_data$Temperature = substr(Cluster1_data$group,4,5)

Cluster2_data=subset(clusterdata2,clusterdata2$Cluster==2)
Cluster2_data$pH = substr(Cluster2_data$group,1,3)
Cluster2_data$Temperature = substr(Cluster2_data$group,4,5)

Cluster3_data=subset(clusterdata2,clusterdata2$Cluster==3)
Cluster3_data$pH = substr(Cluster3_data$group,1,3)
Cluster3_data$Temperature = substr(Cluster3_data$group,4,5)

Cluster4_data=subset(clusterdata2,clusterdata2$Cluster==4)
Cluster4_data$pH = substr(Cluster4_data$group,1,3)
Cluster4_data$Temperature = substr(Cluster4_data$group,4,5)

Cluster5_data=subset(clusterdata2,clusterdata2$Cluster==5)
Cluster5_data$pH = substr(Cluster5_data$group,1,3)
Cluster5_data$Temperature = substr(Cluster5_data$group,4,5)

Cluster6_data=subset(clusterdata2,clusterdata2$Cluster==6)
Cluster6_data$pH = substr(Cluster6_data$group,1,3)
Cluster6_data$Temperature = substr(Cluster6_data$group,4,5)

# perform ANOVA for each cluster to ID genes that differed by group.
Cluster1AOV=aov(value~pH*Temperature, data=Cluster1_data)
TukeyHSD(Cluster1AOV)
write.csv(HSD1$`pH:Temperature`,"TukeyHSD1.csv")
Cluster2AOV=aov(value~pH*Temperature, data=Cluster2_data)
HSD2= TukeyHSD(Cluster2AOV)
write.csv(HSD2$`pH:Temperature`,"TukeyHSD2.csv")
Cluster3AOV=aov(value~pH*Temperature, data=Cluster3_data)
HSD3= TukeyHSD(Cluster3AOV)
write.csv(HSD3$`pH:Temperature`,"TukeyHSD3.csv")
Cluster4AOV=aov(value~pH*Temperature, data=Cluster4_data)
HSD4= TukeyHSD(Cluster4AOV)
write.csv(HSD4$`pH:Temperature`,"TukeyHSD4.csv")
Cluster5AOV=aov(value~pH*Temperature, data=Cluster5_data)
HSD5= TukeyHSD(Cluster5AOV)
write.csv(HSD5$`pH:Temperature`,"TukeyHSD5.csv")
Cluster6AOV=aov(value~pH*Temperature, data=Cluster6_data)
HSD6= TukeyHSD(Cluster6AOV)
write.csv(HSD6$`pH:Temperature`,"TukeyHSD6.csv")


#######
#
# Make a table with specific gene text (e.g., "resilin")
#
#######

#subset the data to make a new table just containing text string.
resilindata=subset(newMDSdata, regexpr("resilin", newMDSdata$NAME) > 0)

cuticledata=subset(newMDSdata, regexpr("cuticle", newMDSdata$NAME) > 0)
library(reshape)
resilindatamelt=melt(resilindata,id.vars="CloneID",measure.vars=c(resilindata[3,47]))
resilindatamelt=melt(resilindata)
colnames(resilindata)
pHlong=c(rep("8.0",255),rep("7.5",255),rep("8.0",255),rep("7.5",255),rep("7.8",255),rep("8.0",255),rep("7.8",255),rep("7.5",255),rep("7.8",255))
Templong=c(rep("13",255),rep("11",255),rep("11",255),rep("14",255),rep("13",255),rep("14",255),rep("14",255),rep("13",255),rep("11",255))

resilindataplot=cbind(resilindatamelt,pHlong,Templong)
head(resilindataplot)
library(plyr)
library(ggplot2)
Mean<-ddply(resilindataplot,.(pHlong,Templong), function(d) mean(d$value)) # if group file has columns called pH and Temperature
sd<-ddply(resilindataplot,.(pHlong,Templong), function(d) sd(d$value)) # if group file has columns called pH and Temperature
names(Mean)=c("pH","Temperature","Mean") # rename
names(sd)=c("pH","Temperature","SD") # rename
plotting_data=merge(Mean,sd) #make one data frame
plotting_data$pH = c(rep(7.5,3),rep(7.8,3),rep(8.0,3))
a <- ggplot(plotting_data, aes(x = pH, y = Mean, ymax = Mean + SD, ymin = Mean - SD, color=Temperature, fill=Temperature))
a + geom_errorbar(color="black", width=0.02) + geom_point(aes(shape=Temperature, fill=Temperature),size = 4) + geom_line(aes(group=Temperature), size=0.5, linetype=1) + labs(title="all pro-resilins",x = "pH treatment", y = "mean FPKM") + scale_color_manual(values=c("#3399FF", "#66CC00", "#CC0066"))+scale_x_continuous(breaks=c(7.5,7.8,8.0))


## make an interaction plot of the unclustered cluster:
unclustdata=read.csv(file.choose())
# prepare data for plotting using reshape
library(reshape)
clusterdata2=melt(unclustdata[,c(3:48)],id.var=c("Cluster"))
library(plyr)
library(ggplot2)
clusterdata2$group = substr(clusterdata2$variable,1,6)
head(clusterdata2)
